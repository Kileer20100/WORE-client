use tokio_tungstenite::connect_async;
use futures_util::{SinkExt, StreamExt};
use tokio::io::{self, AsyncBufReadExt};

#[tokio::main]
async fn main() -> Result<(), Box<dyn std::error::Error>> {
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É (–æ–¥–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –≤—Å—é –ø—Ä–æ–≥—Ä–∞–º–º—É)
    let (mut ws, _) = connect_async("ws://127.0.0.1:8080").await?;
    println!("‚úÖ –ü–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ —Å–µ—Ä–≤–µ—Ä—É");
    println!("üí° –í–≤–æ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏—è (–ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –≤—ã—Ö–æ–¥–∞):");

    // –ù–ï —Ä–∞–∑–¥–µ–ª—è–µ–º –ø–æ—Ç–æ–∫ - —Ä–∞–±–æ—Ç–∞–µ–º —Å —Ü–µ–ª—ã–º WebSocket
    let (mut write, mut read) = ws.split();

    // –ó–∞–¥–∞—á–∞ –¥–ª—è —á—Ç–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
    let read_handle = tokio::spawn(async move {
        while let Some(message) = read.next().await {
            match message {
                Ok(msg) => println!("üì• –°–µ—Ä–≤–µ—Ä: {}", msg),
                Err(e) => eprintln!("‚ùå –û—à–∏–±–∫–∞: {}", e),
            }
        }
    });

    // –ß—Ç–µ–Ω–∏–µ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞
    let mut stdin = io::BufReader::new(io::stdin()).lines();

    while let Some(line) = stdin.next_line().await? {
        if line.trim().is_empty() {
            break;
        }

        println!("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º: {}", line);
        write.send(line.into()).await?;
    }

    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    drop(write); // –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É
    read_handle.await?; // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —á—Ç–µ–Ω–∏—è
    
    println!("üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ");
    Ok(())
}